unixv6fs.h:
19d18
<  * @author original UNIX v6 team + Mendel Rosenblum (Stanford) + Edouard Bugnion
202,204c201,209
<     /* TODO WEEK 04:
<      * la première chose à faire est de définir cette structure.
<      */
---
>     uint16_t    i_mode;                         /*contains informations about inode*/
>     uint8_t     i_nlink;                        /*unused for this project*/
>     uint8_t     i_uid;                          /*id of the proprietary of the file*/
>     uint8_t     i_gid;                          /*id of the file group*/
>     uint8_t     i_size0;                        /*least significant bits of the file size*/
>     uint16_t    i_size1;                        /*most significant bits of the file size*/
>     uint16_t    i_addr[ADDR_SMALL_LENGTH];      /*contains the sector number where the file is stored*/
>     uint16_t    i_atime[2];                     /*stores the date of the last access to the file*/
>     uint16_t    i_mtime[2];                     /*stores the date of the last modification of the file*/


mount.h:
7d6
<  * @author Edouard Bugnion
13d11
< #include "bmblock.h"
26a25,30
>  * @brief fills the fbm and the ibm of the given unixfilesystem
>  * @param u the filesystem
>  */
> void fill(struct unix_filesystem *u);
> 
> /**
46a51,53
> /*
>  * staff only; students will not have to implement
>  */


error.h:
7d6
<  * @author Edouard Bugnion


inode.h:
7d6
<  * @author Edouard Bugnion
17a17,19
> #define MAX_SMALL_FILE_SIZE 4000 // define the maximum size of a "small" file, in byte
> #define MAX_BIG_FILE_SIZE 896000 // define the maximum size of a "big" file, in byte
> 
90c92
<  * @return >0: the sector on disk;  <0 error
---
>  * @return >0: the sector on disk;  0: unallocated;  <0 error
108c110
< int inode_write(struct unix_filesystem *u, uint16_t inr, const struct inode *inode);
---
> int inode_write(struct unix_filesystem *u, uint16_t inr, struct inode *inode);


sha.h:
7d6
<  * @author Aurélien Soccard
13a13,14
> #define CONTENT_MAX_SIZE 896000
> 
28c29
<  * @param inode the inode of which we want to print the content
---
>  * @param inode the inocde of which we want to print the content


test-core.c:
5d4
<  * @author Aurélien Soccard & Jean-Cédric Chappelier
20,21c19
< void error(const char* message)
< {
---
> void error(const char *message) {
29,30c27
< void check_args(int argc)
< {
---
> void check_args(int argc) {
39,40c36
< int main(int argc, char *argv[])
< {
---
> int main(int argc, char *argv[]) {


filev6.h:
7d6
<  * @author Edouard Bugnion
26c25
<  * @brief open the file corresponding to a given inode; set offset to zero
---
>  * @brief open up a file corresponding to a given inode; set offset to zero
28c27
<  * @param inr the inode number (IN)
---
>  * @param inr he inode number (IN)
30c29
<  * @return 0 on success; the appropriate error code (<0) on error
---
>  * @return 0 on success; <0 on errror
46,47c45
<  * @return >0: the number of bytes of the file read; 0: end of file;
<  *             the appropriate error code (<0) on error
---
>  * @return >0: the number of bytes of the file read; 0: end of file; <0 error
54c52
<  * @param mode the mode of the file
---
>  * @param mode the new offset of the file
68c66
< int filev6_writebytes(struct unix_filesystem *u, struct filev6 *fv6, const void *buf, int len);
---
> int filev6_writebytes(struct unix_filesystem *u, struct filev6 *fv6, void *buf, int len);


sector.h:
7d6
<  * @author Edouard Bugnion
31c30
<  * @brief write one 512-byte sector from the virtual disk
---
>  * @brief read one 512-byte sector from the virtual disk
37c36
< int sector_write(FILE *f, uint32_t sector, const void *data);
---
> int sector_write(FILE *f, uint32_t sector, void  *data);


direntv6.h:
7d6
<  * @author Edouard Bugnion
21,24c20,23
<     /* TODO WEEK 06:
<      * définir cette structure.
<      */
<     int unused; // so that it can compile before WEEK 6
---
> 	struct filev6 fv6;
> 	struct direntv6 dirs[DIRENTRIES_PER_SECTOR];
> 	uint16_t cur;
> 	uint16_t last;
38c37
<  * @param d the directory reader
---
>  * @param d the dierctory reader
46c45
<  * @brief debugging routine; print a subtree (note: recursive)
---
>  * @brief debugging routine; print the a subtree (note: recursive)
57,58c56,57
<  * @param inr the root of the subtree
<  * @param entry the pathname relative to the subtree
---
>  * @param inr the current of the subtree
>  * @param entry the prefix to the subtree


bmblock.h:
7d6
<  * @author Edouard Bugnion
11d9
< #include <stddef.h> // for size_t
12a11
> #include <stdio.h>
19c18,22
<     int unused; // so that it can compile before WEEK 9
---
> 	size_t length;
> 	uint64_t cursor;
> 	uint64_t min;
> 	uint64_t max;
> 	uint64_t bm[1];
26c29
<  * between min and max (included, thus (max-min+1) elements).
---
>  * between min and may (included, thus (max-min+1) elements).
66a70,75
> 
> /**
>  * @brief free the space used for a bitmap
>  * @param bmblock the bitmap block to be freed
>  */
> void bm_free(struct bmblock_array *bmblock);

